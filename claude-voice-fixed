#!/bin/bash

# Claude Voice Input - Fixed version with debug info

# Configuration
WHISPER_DIR="$HOME/whisper.cpp"
MODEL="ggml-large-v3.bin"
TEMP_AUDIO="/tmp/claude_voice_$(date +%s).wav"

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m'

# Function to clean up on exit
cleanup() {
    if [ -f "$TEMP_AUDIO" ]; then
        rm -f "$TEMP_AUDIO"
    fi
    if [ ! -z "$FFMPEG_PID" ]; then
        kill -INT $FFMPEG_PID 2>/dev/null
    fi
}

trap cleanup EXIT INT TERM

# Function to record audio
record() {
    echo -e "${BLUE}ðŸŽ¤ Recording...${NC} (Press ${GREEN}Enter${NC} to stop)"
    
    # Start recording
    ffmpeg -f avfoundation -i ":0" -ar 16000 -ac 1 "$TEMP_AUDIO" -y -loglevel warning &
    FFMPEG_PID=$!
    
    # Wait for Enter
    read -r
    
    # Stop recording
    kill -TERM $FFMPEG_PID 2>/dev/null
    sleep 1
    kill -KILL $FFMPEG_PID 2>/dev/null
    wait $FFMPEG_PID 2>/dev/null
}

# Function to transcribe
transcribe() {
    echo -e "${YELLOW}âš¡ Transcribing...${NC}"
    
    OUTPUT_FILE="${TEMP_AUDIO%.wav}"
    "$WHISPER_DIR/build/bin/whisper-cli" \
        -m "$WHISPER_DIR/models/$MODEL" \
        -f "$TEMP_AUDIO" \
        -otxt \
        -of "$OUTPUT_FILE" \
        2>/dev/null
    
    echo "$OUTPUT_FILE.txt"
}

# Main execution - simplified like the debug version
main() {
    local show_transcript=true
    
    # Parse simple arguments
    if [ "$1" = "-q" ]; then
        show_transcript=false
    fi
    
    # Record
    record
    
    # Check recording
    if [ ! -f "$TEMP_AUDIO" ]; then
        echo -e "${RED}âœ— No audio file created${NC}"
        exit 1
    fi
    
    file_size=$(stat -f%z "$TEMP_AUDIO")
    if [ "$file_size" -lt 100 ]; then
        echo -e "${RED}âœ— File too small (${file_size} bytes)${NC}"
        exit 1
    fi
    
    # Transcribe
    transcript_file=$(transcribe)
    
    # Check transcript
    if [ ! -f "$transcript_file" ]; then
        echo -e "${RED}âœ— Transcription failed - no transcript file${NC}"
        exit 1
    fi
    
    # Get content and copy to clipboard
    transcript_content=$(cat "$transcript_file")
    echo "$transcript_content" | pbcopy
    
    # Show result
    if [ "$show_transcript" = true ]; then
        echo -e "${GREEN}âœ“ Transcribed:${NC}"
        echo "----------------------------------------"
        echo "$transcript_content"
        echo "----------------------------------------"
    fi
    
    echo -e "${GREEN}âœ“ Copied to clipboard!${NC} Ready to paste into Claude"
    
    # Clean up transcript
    rm -f "$transcript_file"
}

# Run
main "$@"